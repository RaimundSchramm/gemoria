require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe TasksController, :type => :controller do
  render_views

  # This should return the minimal set of attributes required to create a valid
  # Task. As you add validations to Task, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { name: 'do this' }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TasksController. Be sure to keep this updated too.
  let(:user) { create :user }
  def valid_session
    { user_id: user.id }
  end

  render_views

  let(:userstory) { create(:userstory) }
  let(:task)      { create(:task, userstory: userstory) }

  context 'before_filters' do
    describe '#find_userstory' do
      it 'returns the userstory of the userstory_id in params' do
        controller.params = { userstory_id: userstory.id }
        expect(controller.send(:find_userstory)).to eq userstory
      end

      context 'valid route' do
        it 'assigns the parent userstory for every REST action' do
          [:index, :new].each do |action|
            get action, { userstory_id: userstory.to_param }, valid_session
            expect(assigns(:userstory)).to eq userstory
          end

          [:show, :edit].each do |action|
            get action, { userstory_id: userstory.to_param, id: task.to_param }, valid_session
            expect(assigns(:userstory)).to eq userstory
          end

          [:update].each do |action|
            put action, { userstory_id: userstory.to_param, id: task.to_param, task: valid_attributes }, valid_session
            expect(assigns(:userstory)).to eq userstory
          end

          [:create, :destroy].each do |action|
            post action, { userstory_id: userstory.to_param, id: task.to_param, task: valid_attributes }, valid_session
            expect(assigns(:userstory)).to eq userstory
          end
        end
      end
    end
  end

  describe "GET index" do
    it 'returns http success' do
      get :index, { userstory_id: userstory.to_param }, valid_session
      expect(response).to be_success
    end

    it "assigns all incomplete tasks as @incomplete_tasks" do
      task = create(:task, userstory: userstory, complete: false)
      get :index, { userstory_id: userstory.to_param }, valid_session
      expect(assigns(:incomplete_tasks)).to eq([task])
    end

    it "assigns all complete tasks as @complete_tasks" do
      task = create(:task, userstory: userstory, complete: true)
      get :index, { userstory_id: userstory.to_param }, valid_session
      expect(assigns(:complete_tasks)).to eq([task])
    end

    it 'renders index template' do
      get :index, { userstory_id: userstory.to_param }, valid_session
      expect(response).to render_template 'index'
    end
  end

  describe 'GET new' do
    it 'returns http success' do
      get :new, { userstory_id: userstory.to_param }, valid_session
      expect(response).to be_success
    end

    it 'assigns a new task as @task' do
      get :new, { userstory_id: userstory.to_param }, valid_session
      expect(assigns(:task)).to be_a_new(Task)
    end

    it 'assigns a new task to @userstory' do
      get :new, { userstory_id: userstory.to_param }, valid_session
      expect(assigns(:task).userstory_id).to eq userstory.id
    end

    it 'renders new template' do
      get :new, { userstory_id: userstory.to_param }, valid_session
      expect(response).to render_template 'new'
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Task" do
        expect {
          post :create, { userstory_id: userstory.to_param, :task => valid_attributes}, valid_session
        }.to change(Task, :count).by(1)
      end

      it "assigns a newly created task as @task" do
        post :create, { userstory_id: userstory.to_param, :task => valid_attributes}, valid_session
        expect(assigns(:task)).to be_a(Task)
        expect(assigns(:task)).to be_persisted
        expect(assigns(:task).userstory_id).to eq userstory.id
      end

      it "redirects to the parent userstory" do
        post :create, { userstory_id: userstory.to_param, :task => valid_attributes}, valid_session
        expect(response).to redirect_to userstory_tasks_path assigns(:userstory)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved task as @task" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Task).to receive(:save).and_return(false)
        post :create, { userstory_id: userstory.to_param, :task => { name: 'invalid' } }, valid_session
        expect(assigns(:task)).to be_a_new(Task)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Task).to receive(:save).and_return(false)
        post :create, { userstory_id: userstory.to_param, :task => { name: 'invalid' } }, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe 'GET show' do
    it 'returns http success' do
      get :show, { userstory_id: userstory.to_param, :id => task.to_param}, valid_session
      expect(response).to be_success
    end

    it 'assigns the requested task as @task' do
      get :show, { userstory_id: userstory.to_param, :id => task.to_param}, valid_session
      expect(assigns(:task)).to eq(task)
    end

    it 'renders show template' do
      get :show, { userstory_id: userstory.to_param, :id => task.to_param}, valid_session
      expect(response).to render_template 'show'
    end
  end

  describe "GET edit" do
    it 'returns http success' do
      get :edit, { userstory_id: userstory.to_param, :id => task.to_param}, valid_session
      expect(response).to be_success
    end

    it "assigns the requested task as @task" do
      get :edit, { userstory_id: userstory.to_param, :id => task.to_param}, valid_session
      expect(assigns(:task)).to eq(task)
    end

    it 'renders edit template' do
      get :edit, { userstory_id: userstory.to_param, :id => task.to_param}, valid_session
      expect(response).to render_template 'edit'
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested task" do
        # Assuming there are no other tasks in the database, this
        # specifies that the Task created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        expect_any_instance_of(Task).to receive(:update_attributes!).with({'name' => 'other'})
        put :update, { userstory_id: userstory.to_param, :id => task.to_param, :task => {'name' => 'other'}}, valid_session
      end

      it "assigns the requested task as @task" do
        put :update, { userstory_id: userstory.to_param, :id => task.to_param, :task => valid_attributes}, valid_session
        expect(assigns(:task)).to eq(task)
      end

      it "redirects to the task" do
        put :update, { userstory_id: userstory.to_param, :id => task.to_param, :task => valid_attributes}, valid_session
        expect(response).to redirect_to userstory_tasks_path(assigns(:userstory))
      end
    end

    describe "with invalid params" do
      it "assigns the task as @task" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Task).to receive(:save).and_return(false)
        put :update, { userstory_id: userstory.to_param, :id => task.to_param, :task => { name: 'invalid' } }, valid_session
        expect(assigns(:task)).to eq(task)
      end

      it "re-renders the 'edit' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Task).to receive(:update_attributes!).and_return(false)
        put :update, { userstory_id: userstory.to_param, :id => task.to_param, :task => { name: 'invalid' } }, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested task" do
      task#TODO clearify test setup, lazy loading, let, database and object behaviour, best practice
      expect {
        delete :destroy, { userstory_id: userstory.to_param, :id => task.to_param}, valid_session
      }.to change(Task, :count).by(-1)
    end

    it "redirects to the tasks list" do
      delete :destroy, { userstory_id: userstory.to_param, :id => task.to_param}, valid_session
      expect(response).to redirect_to userstory_tasks_path(assigns(:userstory))
    end
  end

end
